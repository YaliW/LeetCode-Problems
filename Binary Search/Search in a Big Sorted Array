given a sorted array, find the first index of a target number. the algorithm should be O(logk), where k is the first index of the target number.

public int searchBigSortedArray(int[] A, int target) {
    if (A == null || A.length == 0) {
        return -1;
     }
     //to get the value of end, and make it is close to the target
     int end = 0;
     while (end < A.length && A[end] < target) {
         end = end *2 + 1;
     }
     if(end >= A.length) {
         end = A.length - 1;
     }
     int start = 0;
     while (start + 1 < end) {
         mid = start + (end - start)/2;
         if (A[mid] == target) {
             end = mid;
         } else if (A[mid] < target) {
             start = mid;
         } else {
             end = mid;
         }
     }
     if (A[start] == target) {
         return start;
     } else if (A[end] == target) {
         retrun end;
     }
     retrun -1;
 }
}
         
         
