Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.

public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int start, mid, row, column, end;
        if(matrix == null || matrix.length == 0) {
            return false;
        }
        if(matrix[0] == null || matrix[0].length == 0) {
            return false;
        }
        start =0;
        row = matrix.length;
        column = matrix[0].length;
        end = row*column - 1;
        while(start + 1 < end) {
            mid = start + (end - start)/2;
            int num = matrix[mid/column][mid%column];
            if (num == target) {
                return true;
            }else if (num > target) {
                end = mid;
            }else {
                start = mid;
            }
        }
        if(matrix[start/column][start%column] == target) {
            return true;
        }else if (matrix[end/column][end%column]==target) {
            return true;
        }
        return false;
        
    }
    
}
