Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if (root == null || root == p || root == q) {
            return root;
        }
        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);
        
        if(left != null && right != null) return root;
        if(left != null) return left;
        if(right != null) return right;
        else return null;
    }
}

//use parent pointer
public class Solution {
    private ArrayList<TreeNode> getAncestor (TreeNode node) {
        arrayList<TreeNode> list = new ArrayList<TreeNode>();
        while(node != null) {
            list.add(node);
            node = node.parent;
        }
        return list;
    }   
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        ArrayList<TreeNode> list1 = getAncestor(p);
        arrayList<TreeNode> list2 = getAncestor(q);
        int i, j;
        for(i = list1.size()-1, j = list2.size()-1; i >= 0 && j >= 0; i--, j--) {
            if(list1.get(i) != list2.get(j)) {
                return list1.get(i).parent;
            }
        }
        return list1.get(i+1);
    }
}
