/* Given two binary trees, write a function to check if they are equal or not.
Two binary trees are considered equal if they are structurally identical and the nodes have the same value. */

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        Stack<TreeNode> stack_p = new Stack<>();
        Stack<TreeNode> stack_q = new Stack<>();
        if(p!= null) stack_p.push(p);
        if(q!= null) stack_q.push(q);
        while(!stack_p.isEmpty() && !stack_q.isEmpty()){
            TreeNode pNode = stack_p.pop();
            TreeNode qNode = stack_q.pop();
            if(pNode.val != qNode.val) return false;
            if(pNode.right!=null) stack_p.push(pNode.right);
            if(qNode.right!=null) stack_q.push(qNode.right);
            if(stack_p.size()!=stack_q.size()) return false;
            
            if(pNode.left!=null) stack_p.push(pNode.left);
            if(qNode.left!=null) stack_q.push(qNode.left);
            if(stack_p.size()!=stack_q.size()) return false;
            
        }
        return stack_p.size() == stack_q.size();
    
    }
}
