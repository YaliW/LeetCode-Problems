/* Given a linked list, return the node where the cycle begins. If there is no cycle, return null*/

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        
        ListNode runner = head;
        ListNode walker = head;
        while (runner != null && runner.next != null){
            runner = runner.next.next;
            walker = walker.next;
            if(runner == walker){
                ListNode slow = head;
                while(slow != walker){
                    slow = slow.next;
                    walker = walker.next;
                }
                return slow;
            }
        }
        return null;
    }
}
